import microbit
W1 = [[0.395656798135405, -0.2572052455984087, 0.31068805034809166, 0.5886858262627639, 0.18430099473572478, -0.32158716204474813, -0.31958069660133237, 0.09644133628087474, -0.0029870469992363444, 0.527314438025718, -0.029773048273103817, -0.6827576040006118, 0.3122122605719258, -0.8011820231930882, 0.16130588493577747, 0.22923351251344706, -0.15870172786198314, 0.20488940561146238, -0.6751919736020808, -0.612434281005097, 0.011257366916143161, 0.21065172200182358, -0.19542263112102018, -0.32399463167454456, 0.2702945289293258], [-0.1856079611754577, -0.16512612469628102, -1.3840090110546208, 0.47813882404790836, 0.2670918926231527, 1.0458244491523325, 1.8811461657673942, -0.33047580355247597, -1.1569986990347823, -1.3266620615922724, 0.4160885558595334, 0.9178059894623697, 0.6155116676030092, -0.5218812808031541, 0.04211081105064453, 1.0062952326480237, 0.7447917465596328, 0.8246988108155128, 1.142116372033629, 1.2083824688420426, -0.3493983748184161, -0.5044452536764292, -0.6460763511244217, 1.1008219422572996, 0.23192117608587987], [-0.037355876253955346, 0.7913335784773671, -0.2686739723086638, -0.5526153421143426, -0.4709402910710183, -0.5190844766832863, -0.44885300752653756, -0.6340747014728209, -1.072418994051578, -0.24950917499570388, 0.12196202146406028, 0.33021167063279333, -1.1673921623314856, 0.12467682633661341, 0.42398106425755905, -0.6709083742011592, -0.2859994671693577, -0.27832635098486475, 0.7707532460813074, 0.3368626017777617, 0.77702111339021, 0.677856818910037, 0.26847658306660516, -0.1672978127087917, -0.42011273043858477], [-0.13873765412199027, 0.467968729753585, 0.4166691912139955, 0.12493628125415196, 0.48706302493732645, -0.3126326829005793, -0.029158768609971936, 0.3854563816250614, -0.522101128301285, -0.9302704762059087, -0.21566129951569016, -0.5422229768415369, -0.573273586716166, 0.26620873722058386, 0.23980415784219627, -1.6300426979911804, -2.2023600640825167, -0.6232811128171233, 0.540557843733869, 0.3407529650694174, -0.11027980211694889, -0.5097803322380663, 0.41383799504284435, 0.37760935405519547, 0.04943152783656695], [-0.2578865824843341, -0.11743827649991954, 0.3715114089999572, 0.19544441830863377, 0.04516577172632713, 0.6393180858868748, 1.3246198241841753, 1.0234221638893164, 1.065997879167309, 1.3818926981034103, -0.03635979588983643, 0.11706904414896607, -0.07438582940151575, 0.5836515163875485, 0.3630644318552212, -0.5766023462057682, -1.4059146118133166, 0.06439435670070422, 0.689893977983956, 0.5829437929673661, -0.09527939413461584, -0.8720641640707986, -0.7027077364669927, -0.6073766813967327, -0.4465685864223013], [-0.32625226192292983, -0.9274100104870683, 0.6942374769900844, 0.3780652585401388, 0.34819252409710205, 0.846276266823392, 0.789404133079708, 0.10147106485382293, -0.6408080204338463, 0.4182953761377535, 0.5457229364447718, 0.9887385162962807, 0.33392074225161217, -0.5221593428621284, -0.39125649429345183, -0.5895165253869599, 0.05762825718286142, -1.0810908420888798, -0.7665207854798249, -0.16695931602825154, 0.4945322022182419, 1.568880602476821, 1.2000448649773603, 0.021015448397096202, 0.11760643762076224], [0.3575470904669765, 0.7867145381348885, 0.16023601156495593, -0.09689983749960422, 0.11455334695395168, -0.5097893565472891, -0.3420180460675804, -0.7069713145302655, 1.3199242242776308, 0.9197650231732406, -0.24244123509611443, -0.18467236499463158, 0.8213574365370168, 1.5440231282271015, 0.29785492285074955, -0.34556724847998227, -0.13727497083921245, -0.5043688344961385, 0.3789071244216462, 0.15903124145534012, -0.5664646802035966, 0.9004217269097057, 0.5864263277903912, 0.3602586948444717, 0.6498997275569982], [-0.28551294780954073, -0.7814355001684489, -0.034729226833139455, -0.4094353006743443, 0.1620350210670803, -0.09888409483080965, -0.46031105582658965, 1.0199171504591282, 0.29139016146023994, 0.19762038683653255, 0.09441766019711434, 0.9042954364723687, -1.1512505058818683, -0.20016484755862834, 0.4752938177270821, 0.6179223155938262, 0.595437631399902, 0.5127747806355328, -0.1024839991103649, -0.11463130562110942, -0.42510559416050053, 0.5154383181998491, -0.08205440499154822, -0.4846551461647967, 0.01619746741669051], [0.08182483418779621, -0.4263468637324282, -0.39021468632983786, -0.17605680298963394, -0.1503637991368778, -0.19609213142884896, -0.730294220521501, -0.2568761789016509, 0.7218613366168641, -0.1693977861370292, 0.11453743146417976, -0.6101559082698956, -0.0022557997329238993, -0.49411180946835537, 0.26716710663596194, -0.16835466983163244, -0.4328507043135425, -0.4215374803328973, 0.6958596017218145, -0.1973002013332513, 0.15186011068699298, -0.23809059387013884, -0.7272145233883027, -0.4482957909427921, 0.15230649675290134], [0.3131397733843216, 0.7953475584277497, 0.6452681905782967, 0.13919027880974671, 0.4933170455058066, -0.3596847598480224, 0.5725977309955631, -0.440029838504768, -0.6504120309255772, -0.5641433750247293, -0.40329294626320483, -0.15249972000227358, -0.8431415691256899, 0.5277258708631599, 0.15446216561065151, 0.30611140921585994, 0.7527927077521389, 0.7249086957958777, -0.09755623848812754, -0.26514438885719066, 0.32382237555486865, -0.3468080200722086, 0.797640894475174, 0.028406447459790363, -0.12160196040163578]]
b1 = [[1.5795948643191207], [2.2587812666766682], [2.095827695824844], [2.090222814338555], [1.9351100455027097], [2.5386968333317714], [2.3753225398179154], [2.4383080638212116], [2.520231472793245], [2.4907364922991806]]
W2 = [[0.4825241249139686, -0.08208431653037582, 0.8369494032035754, 0.007804413191558017, 0.34298061997737056, -0.47282754252215214, -0.268961627074675, 1.234946187041387, -0.6973750422226817, 0.7770059909912812], [0.7148683198438982, 0.01942885492730293, -0.5044070512044234, 0.7908758940120749, 0.43512635822987467, 0.8250828377599673, -1.328991418758322, 1.6190686082421195, 1.17990299673289, -0.5839074340875009], [0.674810903280095, -1.9346327610606053, -0.3743781712831977, -1.1934322759225593, -1.9000216785644384, 0.30256837550384025, 1.1836513330651186, -0.06953144567949636, 0.10670492533928837, 0.781656463725174], [-0.26633635192975036, -2.051301610151324, 1.4027805703991403, 0.8590746264555067, -0.5739612854262901, -0.13961670261640616, 1.4822885405459003, -0.35797634370522896, -0.3587129539919504, -0.7086008146489294], [0.2913986025746779, 2.073646426531849, -0.040221438716917385, -0.12264576664215088, 0.2913836983635924, -1.6851917775542862, 0.2613938911689528, -0.6344765110441563, -0.10984980548639049, -0.591221483501759], [-0.26053432945801236, 0.7205125316279001, 0.3845898132760752, 1.5764884663500143, -0.3868498194789293, 0.4582650644972968, -0.7770927148263962, -1.5004127311518283, 0.040630373907032516, 0.5950516172668371], [-0.8108931746862348, 1.763025688983828, 0.09844859250758, -0.9597956591747104, -2.0011495613472023, 0.6616034524290189, -0.8965216578257635, 0.21075754846189212, -0.48939403807349957, 0.662106683080975], [0.7283649802116331, -0.7615003120949718, -0.26491375915409715, 0.844226524354897, 0.44955430384687944, -1.8366557704859152, 0.40614831943670343, 0.2091037190915911, 0.9980562098209248, 1.1555232037705168], [-0.3492162130762148, 0.5166298981549527, -1.3728980570172316, -1.9706825120048437, -0.10667933914673708, 0.43073369291954383, 0.7551971440130266, -0.5997404347214235, 0.11929281038299419, -0.24004857624914805], [-0.3978715698286356, -0.9560202583393996, -0.6098619799111296, 0.6102363494309898, 1.6915188636594107, 0.7572167753926619, 0.39162146581949053, -0.8277127837060838, -0.9717233963094832, -0.9958924024188558]]
b2 = [[-0.028738309805414253], [0.4720642988886715], [0.19478047347994287], [0.2560779354627315], [0.4304012269446722], [-0.49564397718312414], [-0.001302383689973702], [-0.2352379415612773], [-0.34905499936883677], [0.037841887879392466]]
def Full(size, a): return [[a for j in range(size[0])] for i in range(size[1])]
def Flip(mat, axis):
    mat2 = mat.copy()
    if axis:
        for i in mat2:
            i.reverse()
    else:
        mat2.reverse()
    return mat2
def FindCom(grid):
    Mx, My, mass = 0, 0, 0
    for idx1, val1 in enumerate(grid):
        for idx2, val2 in enumerate(val1):
            if val2:
                Mx += idx2
                My += idx1
                mass += 1
    return (Mx//mass, My//mass)
def sum2D(z):
    return [sum([y[x] for y in z]) for x in range(len(z[0]))]
def divide2D(z):
    return [[z[x][y] / sum2D(z)[y] for y in range(len(z[0]))] for x in range(len(z))]
def dot_product(a, b):
    return [[sum(a*b for a,b in zip(X_row,Y_col)) for Y_col in zip(*b)] for X_row in a]
def add_bias(a, b):
    return [[y + b[x][0] for y in a[x]] for x in range(len(b))]
def num2str(z):
    if z == 0: return "zero"
    elif z == 1: return "one"
    elif z == 2: return "two"
    elif z == 3: return "three"
    elif z == 4: return "four"
    elif z == 5: return "five"
    elif z == 6: return "six"
    elif z == 7: return "seven"
    elif z == 8: return "eight"
    elif z == 9: return "nine"
def on_start():
    global L, pos
    microbit.display.set_pixel(0, 0, 9)
    L = [[0 for _ in range(5)] for _ in range(5)]
    pos = [0, 0]
def on_press(val):
    global L, pos
    if L[pos[1]][pos[0]] == 0:
        microbit.display.set_pixel(pos[0], pos[1], 0)
    else:
        microbit.display.set_pixel(pos[0], pos[1], 4)
    if pos[val] == 4:
        pos[val] = 0
    else:
        pos[val] += 1
    microbit.display.set_pixel(pos[0], pos[1], 9)
def blik():
    microbit.display.set_pixel(pos[0], pos[1], 0)
    microbit.sleep(100)
    microbit.display.set_pixel(pos[0], pos[1], 9)
on_start()
while True:
    if microbit.button_a.is_pressed() and microbit.button_b.is_pressed():
        L[pos[1]][pos[0]] = 1
        blik()
    elif microbit.button_a.is_pressed():
        on_press(1)
    elif microbit.button_b.is_pressed():
        on_press(0)
    elif microbit.pin_logo.is_touched() and sum(L, []).count(1) >= 3:
        flippedX, flippedY = False, False
        center = FindCom(L)
        if center[0] < 2:
            L = Flip(L, 1)
            center = FindCom(L)
            flippedX = True
        if center[1] < 2:
            L = Flip(L, 0)
            center = FindCom(L)
            flippedY = True
        div, mod = len(L)//2, len(L)%2
        l, u = max((center[1]-(div+mod-1)), 0), max((center[0]-(div+mod-1)), 0)
        y0, y1, x0, x1 = min(l, 4), min(center[1]+div+1, 4), min(u, 4), min(center[0]+mod+2, 4)
        mat2 = Full((x1+1-x0, y1+1-y0), 0)
        for i in range(y0, y1+1): mat2[i-y0] = L[i][x0:x1+1]
        out = Full((len(L), len(L)), 0)
        for idx, val in enumerate(mat2):
            try:
                out[idx][:len(mat2[0])] = val
            except:
                microbit.display.scroll("centring error", wait=False, loop =False)
        if flippedX: out = Flip(out, 1)
        if flippedY: out = Flip(out, 0)
        X = [[i] for i in sum(out, [])]
        Z1_ = dot_product(W1, X)
        Z1 = add_bias(Z1_, b1)
        A1 = [[0 if y < 0 else y for y in x] for x in Z1]
        Z2_ = dot_product(W2, A1)
        Z2 = add_bias(Z2_, b2)
        A2 = divide2D([[round(2.718281828459045**y, 14) for y in x]for x in Z2])
        prediction = [[A2[y][x] for y in range(len(A2))].index(max([A2[y][x] for y in range(len(A2))])) for x in range(len(A2[0]))][0]
        microbit.display.scroll(str(num2str(prediction)), wait=False, loop =False)
        on_start()
    elif microbit.pin1.is_touched():
        L[pos[1]][pos[0]] = 0
        blik()
    elif microbit.pin2.is_touched():
        microbit.display.clear()
        on_start()
    microbit.sleep(150)

import microbit
W1 = [[-0.3557275856689776, 0.15627968978811085, -0.6046416536126279, -0.5298522570009234, 0.2613996205429974, 0.5988301781457912, 0.5832092235291026, -0.04727653757809651, 0.6920387766598554, -0.22088459387628398, 0.01215235302897821, 0.33836465876522537, -0.19956262156364696, 0.5771749196205259, 0.4287046246663123, 1.1982333524752746, 1.579377605917321, 0.9307033365689752, 0.9330299945016898, 0.44264418710522785, -0.1333826418804597, -0.18900165677902778, -0.291802029945869, 0.7585600639351441, -0.3069989884845671], [0.3797729246513649, 0.3687850589100161, -0.25360034616747484, -0.20268800259790565, 0.24329011472078588, -1.0140412299172799, -1.808405048170817, 0.8631244089203283, 1.5442230785154019, 1.0318542096036256, -0.18876626820385123, 0.14840804825834134, -0.03111024121257998, 0.03488210358485416, -0.14198486523838527, -0.07204109129284413, 0.4664431710216695, 0.1519035503351938, -0.8168854992149968, -1.0943631605233841, -0.2832148578578562, 0.930563639062266, -0.13905079498021017, 0.4813749518367888, -0.0119555343424036], [0.1961986752404299, 0.11607085361457867, 0.2499340689191775, -0.046338366421698966, 0.1883572100302759, -0.2112316090740663, -0.37116185241503197, -0.4539437556997092, 0.4025615952556321, -0.2838132707960057, -0.7198185402457848, -0.3199239259303679, -0.21663923402076882, 0.5500915026879972, 0.5842168029953001, 0.10340180635909986, 0.2924810922416426, 0.9823831517699173, -0.16086441515183247, -0.321477524469531, -0.4713396940887307, -0.8428728092851169, -0.2918737739741018, -0.5610924022440854, 0.1663635716511365], [0.03342109310535124, 1.315679410447061, 0.37217598356065806, -0.14507675690563693, 0.3287017982234623, -1.119081205676948, -1.0417370654787248, -0.4995633048322124, -0.1234541012900188, -0.4069783363675153, -0.41125208713694084, -1.0506300991885573, 0.17418431078593832, 0.3071641375759842, 0.548642091946446, -1.649623249490311, -2.0318797782881144, -0.37159273319358915, 1.0750778182096645, 0.6723591744706936, -0.011874183279912166, -0.5401884994784399, -0.09399769554798139, 0.350889425754252, -0.40292373829538186], [0.020321311856231993, -0.5546496148270287, 0.3063609373149107, -0.11241832367885103, -0.05843438183349327, -0.1905153089419884, 0.45650728930758094, -0.18681454990472868, 0.8799381161809867, -0.27276086198326077, -0.4164433597467944, -0.5343910569220783, 0.4411219857657351, 0.20782034417016804, 0.11029113955090637, 0.16593937664424294, -0.7816202440444389, -0.4370024937908839, 0.26697274994085546, 0.15081421036531353, 0.4118127409913548, -0.007471971978338105, -0.4048977927800029, -0.3757714379941111, -0.2838082665249915], [0.3047071882386939, -0.08036560504937179, 0.046151489043457686, 0.4641075441208097, 0.5956898885926613, -0.11227394897057812, -0.17342649365205795, -0.7793152645447915, -0.5926242871196377, 0.00676546901844559, -0.032992010853398965, 0.2156950268210761, 1.1133478081791097, -0.46167833899092736, -0.05497634831064515, -0.24351950218284965, 0.4412561986836774, -0.7926514570691678, -0.11392671732714932, -0.32325658087205966, 0.09534793101503794, 1.5116814741121034, 1.3082502425792044, 0.7775590357468898, 0.6011942772606398], [-0.2703234024696454, -0.34920630826109145, 0.6052994767886083, -0.30878986758342064, 0.27408496937233606, 0.6017850622572686, 0.12312193454440007, 0.49820821119103403, -0.23340398749942454, 1.5690229355889054, 0.38683690529734593, -0.16242894434707092, -0.03365991921498828, -0.6933426892562755, 0.3199759829718903, -0.15463961507478796, 0.31024544664592646, 0.13216187663304974, -0.9060258635726796, 0.01932874471013006, -0.08435415219311926, -0.5758447719620444, -0.20112808038186034, -0.8907676634331038, -0.06858527756101433], [0.08815430220037411, -0.38757056240230714, 0.5359063198454169, 0.10270842116807598, -0.03469362855093261, 0.25426156496243074, -0.07429063338949735, -0.34550698283971554, 0.09473437300983095, -0.2790908483156793, -0.4737073539072288, -0.7288930350778743, 0.1063371192709745, 0.01416332431758738, -0.04653402278873463, -0.3030774944593741, 0.35275072294227566, 0.11876158263572764, 0.1358694786230477, -0.11458545633654237, -0.5490496720805467, -0.8283755961743097, -0.009181573477472418, -0.5731540568497049, 0.3607813252152235], [0.3847799154378226, 0.35914861996600045, 0.6637139519852931, -0.4549206327999272, 0.1576215965302013, -0.1377739485138763, -0.11710304397583275, 0.06726739157747111, -1.761858066803697, -1.2797952057738806, -0.13732378108155818, -0.305629688160745, 0.285646728192398, -0.8602112696322093, 0.3193540771429119, -0.2244308728878386, -0.18055231046582437, 0.7563633971501356, 0.008302017639480394, -0.25180449994982945, 0.5368808402716375, 0.42708177760316535, 0.2960162225902896, 0.10523455896727968, -0.5195046900136872], [-0.17419232571108972, -0.4664680153886644, 1.1448296561368612, -0.021048987168977074, 0.2594583507342124, 0.7182200112556208, 0.6861457584590721, 1.0464362029385952, -0.29103912774602225, -0.08178663898154126, -0.02186557982671985, 0.23925387348856816, -0.47417791000881077, 0.2384635701403134, -0.09055052156367889, -0.8115571251691641, -0.9610803909732695, -0.47886164717796204, 1.0118087638842224, 0.4831996855872814, 0.16758599801759907, 0.15518141463453075, 0.9447276322002696, -0.3706384303399136, -0.04652682150671553]]
b1 = [[1.363111544894377], [1.5318625549946223], [1.429771484549043], [1.9080009252239376], [1.3820194463985411], [2.033512725481079], [1.9053481575105873], [1.3000336818957032], [1.354457461356814], [1.8702624142323292]]
W2 = [[0.5624867373052884, 0.08660608383741952, 0.6142769594406731, -0.9859834812689438, -0.5472249369631411, -0.4396672779658158, 0.8760203250048634, 0.04043571820618197, -0.10283429391816347, 0.674356436684848], [-0.05631665370150093, 1.2958122912512142, -0.3942232399602332, -0.5911142268646644, 0.7406742992453976, -1.0645010875069774, 1.1946564170089204, -0.36900330451038205, 1.3574555785503404, 0.5939165309408269], [-0.5628142241209579, 1.6996614824136826, 0.2272945598790523, -0.9473027610938045, 0.16412110360443222, 0.8104854828781414, 0.020405827355568066, -0.09021038805610591, -0.08396082029060459, -1.2846357192332318], [-1.1241946632668147, 0.8471684433288057, -0.7405702537818866, 1.5696854619929501, -0.1482573248481696, 0.27913055911681867, -0.8719202429424455, -0.22883790161341327, 0.619759055032007, -0.12362917828307295], [1.6188120607566985, -0.4386154596737778, 0.32587702492278503, 0.8310537756034159, 0.3345065121209228, -0.6142661968277732, -0.6399554549307728, -0.666866675990273, -0.026526794756202576, -0.9983615890983315], [-1.3452583441575143, -2.0724987413333005, -0.2510392725987247, 0.9297411328165569, -0.21971129845907025, 0.5025977858626132, -1.0641404758775272, 0.3749395925325611, 0.9629393710423201, 1.030177008022951], [0.9367018906519562, -1.121919234116713, -0.1962397570104279, -1.5962247560010627, -1.1437666085890614, 0.5403164346861659, -1.2649577980873212, 0.21488013035688003, 0.8575662852989017, 0.07349388804962724], [-0.11587392501093553, -0.22679615915123008, 1.2740096627674806, 1.7238524572529965, 0.30019622699435883, -1.3503375346358986, -0.004469612507037654, 0.6029125897573158, 0.6392108412077684, 0.21062822697616923], [0.5004240915053177, -0.42172268952490427, -0.3914847844921943, -1.7537186570450467, 0.17220132944387373, 0.8563275962386374, 0.11327813818592808, 0.8304676715372167, -1.2611727427898158, -0.1434223323845054], [-0.8959156503658199, -0.5850512819203736, -0.5399667564193317, 0.16325687173664352, 0.4730188320939761, 0.13356050199666195, 0.3190925106664817, -0.09590311622502833, -1.3739720600276053, 1.5227148414005804]]
b2 = [[0.29027167527516284], [-0.38942703064577533], [-0.21781154759170684], [-0.28282903265716], [0.12524281337212695], [-0.1676485047455245], [-0.39510700080353023], [-0.04175353658710568], [-0.2504405661471094], [0.1675969678962509]]
def Full(size, a): return [[a for j in range(size[0])] for i in range(size[1])]
def Flip(mat, axis):
    mat2 = mat.copy()
    if axis:
        for i in mat2:
            i.reverse()
    else:
        mat2.reverse()
    return mat2
def FindCom(grid):
    Mx, My, mass = 0, 0, 0
    for idx1, val1 in enumerate(grid):
        for idx2, val2 in enumerate(val1):
            if val2:
                Mx += idx2
                My += idx1
                mass += 1
    return (Mx//mass, My//mass)
def sum2D(z):
    return [sum([y[x] for y in z]) for x in range(len(z[0]))]
def divide2D(z):
    return [[z[x][y] / sum2D(z)[y] for y in range(len(z[0]))] for x in range(len(z))]
def dot_product(a, b):
    return [[sum(a*b for a,b in zip(X_row,Y_col)) for Y_col in zip(*b)] for X_row in a]
def add_bias(a, b):
    return [[y + b[x][0] for y in a[x]] for x in range(len(b))]
def num2str(z):
    if z == 0: return "zero"
    elif z == 1: return "one"
    elif z == 2: return "two"
    elif z == 3: return "three"
    elif z == 4: return "four"
    elif z == 5: return "five"
    elif z == 6: return "six"
    elif z == 7: return "seven"
    elif z == 8: return "eight"
    elif z == 9: return "nine"
def on_start():
    global L, pos
    microbit.display.set_pixel(0, 0, 9)
    L = [[0 for _ in range(5)] for _ in range(5)]
    pos = [0, 0]
def on_press(val):
    global L, pos
    if L[pos[1]][pos[0]] == 0:
        microbit.display.set_pixel(pos[0], pos[1], 0)
    else:
        microbit.display.set_pixel(pos[0], pos[1], 4)
    if pos[val] == 4:
        pos[val] = 0
    else:
        pos[val] += 1
    microbit.display.set_pixel(pos[0], pos[1], 9)
def blik():
    microbit.display.set_pixel(pos[0], pos[1], 0)
    microbit.sleep(100)
    microbit.display.set_pixel(pos[0], pos[1], 9)
on_start()
while True:
    if microbit.button_a.is_pressed() and microbit.button_b.is_pressed():
        L[pos[1]][pos[0]] = 1
        blik()
    elif microbit.button_a.is_pressed():
        on_press(1)
    elif microbit.button_b.is_pressed():
        on_press(0)
    elif microbit.pin_logo.is_touched() and sum(L, []).count(1) >= 3:
        flippedX, flippedY = False, False
        center = FindCom(L)
        if center[0] < 2:
            L = Flip(L, 1)
            center = FindCom(L)
            flippedX = True
        if center[1] < 2:
            L = Flip(L, 0)
            center = FindCom(L)
            flippedY = True
        div, mod = len(L)//2, len(L)%2
        l, u = max((center[1]-(div+mod-1)), 0), max((center[0]-(div+mod-1)), 0)
        y0, y1, x0, x1 = min(l, 4), min(center[1]+div+1, 4), min(u, 4), min(center[0]+mod+2, 4)
        mat2 = Full((x1+1-x0, y1+1-y0), 0)
        for i in range(y0, y1+1): mat2[i-y0] = L[i][x0:x1+1]
        out = Full((len(L), len(L)), 0)
        for idx, val in enumerate(mat2):
            try:
                out[idx][:len(mat2[0])] = val
            except:
                microbit.display.scroll("centring error", wait=False, loop =False)
        if flippedX: out = Flip(out, 1)
        if flippedY: out = Flip(out, 0)
        X = [[i] for i in sum(out, [])]
        Z1_ = dot_product(W1, X)
        Z1 = add_bias(Z1_, b1)
        A1 = [[0 if y < 0 else y for y in x] for x in Z1]
        Z2_ = dot_product(W2, A1)
        Z2 = add_bias(Z2_, b2)
        A2 = divide2D([[round(2.718281828459045**y, 14) for y in x]for x in Z2])
        prediction = [[A2[y][x] for y in range(len(A2))].index(max([A2[y][x] for y in range(len(A2))])) for x in range(len(A2[0]))][0]
        microbit.display.scroll(str(num2str(prediction)), wait=False, loop =False)
        on_start()
    elif microbit.pin1.is_touched():
        L[pos[1]][pos[0]] = 0
        blik()
    elif microbit.pin2.is_touched():
        microbit.display.clear()
        on_start()
    microbit.sleep(150)
